type Query {
  lobbies: [Lobby!]!
  me: User
}

type Mutation {
  setNick(nick: String!): AuthPayload!

  createLobby: Lobby!
  deleteLobby(lobby: ID!): Boolean!

  joinLobby(lobby: ID!): Lobby!
  leaveLobby(lobby: ID!): Boolean!

  submitTurn(word: String!, lobby: ID!): String!

}


type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  nick: String!
  inLobby: ID
}


type Round {
  id: ID!
  word1: String!
  word2: String!
}


type Subscription {
  nextRound: Round!
}


type Lobby {
  id: ID!
  state: GameState!
  creator: User!
  partner: User
  creator_word: String
  partner_word: String
  rounds: [Round!]
}

enum GameState {
  WAITING
  STARTED
  FINISHED
}